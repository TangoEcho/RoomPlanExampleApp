import Foundation
import UIKit

/// Generates customer-friendly comparison reports for sharing
class CustomerReportGenerator {
    
    func generateComparisonReport(current: CoverageScenario, improved: CoverageScenario) -> URL {
        let report = CustomerComparisonReport(
            currentScenario: current,
            improvedScenario: improved,
            improvements: CoverageImprovementCalculator.calculate(current: current, improved: improved),
            generatedAt: Date()
        )
        
        let htmlContent = generateCustomerHTML(report)
        
        let tempURL = FileManager.default.temporaryDirectory
            .appendingPathComponent("WiFi_Improvement_Proposal_\(Date().timeIntervalSince1970).html")
        
        do {
            try htmlContent.write(to: tempURL, atomically: true, encoding: .utf8)
            return tempURL
        } catch {
            print("Error generating customer report: \(error)")
            return tempURL
        }
    }
    
    private func generateCustomerHTML(_ report: CustomerComparisonReport) -> String {
        let improvements = report.improvements
        let current = report.currentScenario
        let improved = report.improvedScenario
        
        let html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Your WiFi Improvement Proposal - Spectrum</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                    color: #333;
                }
                .container { max-width: 800px; margin: 0 auto; background: white; border-radius: 20px; overflow: hidden; box-shadow: 0 20px 40px rgba(0,0,0,0.1); }
                .header { 
                    background: linear-gradient(135deg, #001F3F, #003366); 
                    color: white; 
                    padding: 40px 30px; 
                    text-align: center;
                }
                .spectrum-logo { 
                    font-size: 2.2em; 
                    font-weight: 900; 
                    margin-bottom: 10px;
                    letter-spacing: 2px;
                }
                .header h1 { 
                    margin: 0; 
                    font-size: 1.8em; 
                    font-weight: 600;
                }
                .header p { 
                    margin: 10px 0 0 0; 
                    opacity: 0.9; 
                    font-size: 1.1em;
                }
                
                .improvement-summary {
                    background: linear-gradient(135deg, #e8f5e8, #d4f4dd);
                    padding: 30px;
                    border-bottom: 5px solid #22C55E;
                }
                .improvement-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin-top: 20px;
                }
                .improvement-card {
                    background: white;
                    padding: 20px;
                    border-radius: 12px;
                    text-align: center;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                    border: 2px solid #22C55E;
                }
                .improvement-number {
                    font-size: 2.2em;
                    font-weight: 900;
                    color: #22C55E;
                    margin-bottom: 5px;
                }
                .improvement-label {
                    font-size: 0.9em;
                    color: #666;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                }
                
                .comparison-section {
                    padding: 40px 30px;
                    background: white;
                }
                .comparison-title {
                    text-align: center;
                    font-size: 1.8em;
                    color: #001F3F;
                    margin-bottom: 30px;
                    font-weight: 700;
                }
                .comparison-grid {
                    display: grid;
                    grid-template-columns: 1fr auto 1fr;
                    gap: 30px;
                    align-items: center;
                    margin-bottom: 40px;
                }
                .scenario-card {
                    background: #f8f9fa;
                    border-radius: 16px;
                    padding: 25px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                    border: 3px solid transparent;
                }
                .current-card { border-color: #FFC107; }
                .improved-card { border-color: #22C55E; }
                .scenario-header {
                    text-align: center;
                    margin-bottom: 20px;
                }
                .scenario-title {
                    font-size: 1.3em;
                    font-weight: 700;
                    margin-bottom: 5px;
                }
                .current-title { color: #FF8C00; }
                .improved-title { color: #22C55E; }
                .scenario-subtitle {
                    font-size: 0.9em;
                    color: #666;
                }
                .metric {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 10px 0;
                    border-bottom: 1px solid #eee;
                }
                .metric:last-child { border-bottom: none; }
                .metric-label {
                    font-weight: 500;
                    color: #555;
                }
                .metric-value {
                    font-weight: 700;
                    font-size: 1.1em;
                }
                .vs-divider {
                    background: linear-gradient(135deg, #001F3F, #003366);
                    color: white;
                    width: 60px;
                    height: 60px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: 900;
                    font-size: 1.2em;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                }
                
                .benefits-section {
                    background: linear-gradient(135deg, #f0f8ff, #e6f3ff);
                    padding: 40px 30px;
                    border-top: 5px solid #007AFF;
                }
                .benefits-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-top: 20px;
                }
                .benefit-card {
                    background: white;
                    padding: 20px;
                    border-radius: 12px;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                    border-left: 4px solid #007AFF;
                }
                .benefit-icon {
                    font-size: 2em;
                    margin-bottom: 10px;
                }
                .benefit-title {
                    font-size: 1.2em;
                    font-weight: 700;
                    color: #001F3F;
                    margin-bottom: 8px;
                }
                .benefit-description {
                    color: #555;
                    line-height: 1.5;
                }
                .benefit-value {
                    font-weight: 700;
                    color: #007AFF;
                    font-size: 0.9em;
                    margin-top: 5px;
                }
                
                .recommendations-section {
                    background: white;
                    padding: 40px 30px;
                }
                .recommendation-card {
                    background: #f8f9fa;
                    border: 2px solid #e9ecef;
                    border-radius: 12px;
                    padding: 20px;
                    margin-bottom: 20px;
                }
                .recommendation-title {
                    font-size: 1.2em;
                    font-weight: 700;
                    color: #001F3F;
                    margin-bottom: 8px;
                }
                .recommendation-description {
                    color: #555;
                    line-height: 1.5;
                    margin-bottom: 10px;
                }
                .recommendation-cost {
                    font-weight: 700;
                    color: #22C55E;
                    font-size: 1.1em;
                }
                
                .cta-section {
                    background: linear-gradient(135deg, #001F3F, #003366);
                    color: white;
                    padding: 40px 30px;
                    text-align: center;
                }
                .cta-title {
                    font-size: 1.8em;
                    font-weight: 700;
                    margin-bottom: 15px;
                }
                .cta-subtitle {
                    font-size: 1.1em;
                    margin-bottom: 30px;
                    opacity: 0.9;
                }
                .cta-buttons {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 15px;
                    justify-content: center;
                }
                .cta-button {
                    background: #22C55E;
                    color: white;
                    padding: 15px 30px;
                    border-radius: 30px;
                    text-decoration: none;
                    font-weight: 700;
                    font-size: 1.1em;
                    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
                    transition: transform 0.2s;
                }
                .cta-button:hover { transform: translateY(-2px); }
                .cta-button.secondary {
                    background: transparent;
                    border: 2px solid white;
                    color: white;
                    box-shadow: none;
                }
                
                .footer {
                    background: #f8f9fa;
                    padding: 30px;
                    text-align: center;
                    color: #666;
                    font-size: 0.9em;
                }
                
                @media (max-width: 600px) {
                    body { padding: 10px; }
                    .comparison-grid { grid-template-columns: 1fr; }
                    .vs-divider { justify-self: center; }
                    .cta-buttons { flex-direction: column; align-items: center; }
                    .improvement-grid { grid-template-columns: 1fr; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <div class="spectrum-logo">SPECTRUM</div>
                    <h1>📶 Your WiFi Improvement Proposal</h1>
                    <p>Personalized coverage analysis and recommendations</p>
                </div>
                
                <div class="improvement-summary">
                    <h2 style="text-align: center; color: #22C55E; margin: 0 0 15px 0; font-size: 1.6em;">🎯 Here's What You'll Gain</h2>
                    <div class="improvement-grid">
                        <div class="improvement-card">
                            <div class="improvement-number">+\(Int(improvements.coverageImprovement))%</div>
                            <div class="improvement-label">More Coverage</div>
                        </div>
                        <div class="improvement-card">
                            <div class="improvement-number">+\(Int(improvements.speedImprovement))%</div>
                            <div class="improvement-label">Faster Speed</div>
                        </div>
                        <div class="improvement-card">
                            <div class="improvement-number">+\(Int(improvements.reliabilityImprovement))%</div>
                            <div class="improvement-label">Better Reliability</div>
                        </div>
                        <div class="improvement-card">
                            <div class="improvement-number">\(improvements.deadZoneReduction)</div>
                            <div class="improvement-label">Dead Zones Eliminated</div>
                        </div>
                    </div>
                </div>
                
                <div class="comparison-section">
                    <h2 class="comparison-title">📊 Before vs. After Comparison</h2>
                    <div class="comparison-grid">
                        <div class="scenario-card current-card">
                            <div class="scenario-header">
                                <div class="scenario-title current-title">\(current.name)</div>
                                <div class="scenario-subtitle">\(current.description)</div>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Coverage Area</span>
                                <span class="metric-value" style="color: #FF8C00;">\(Int(current.coveragePercentage))%</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Average Speed</span>
                                <span class="metric-value" style="color: #FF8C00;">\(Int(current.averageSpeed)) Mbps</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Reliability</span>
                                <span class="metric-value" style="color: #FF8C00;">\(Int(current.reliabilityScore * 100))%</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Dead Zones</span>
                                <span class="metric-value" style="color: #DC3545;">\(current.deadZones.count)</span>
                            </div>
                        </div>
                        
                        <div class="vs-divider">VS</div>
                        
                        <div class="scenario-card improved-card">
                            <div class="scenario-header">
                                <div class="scenario-title improved-title">\(improved.name)</div>
                                <div class="scenario-subtitle">\(improved.description)</div>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Coverage Area</span>
                                <span class="metric-value" style="color: #22C55E;">\(Int(improved.coveragePercentage))%</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Average Speed</span>
                                <span class="metric-value" style="color: #22C55E;">\(Int(improved.averageSpeed)) Mbps</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Reliability</span>
                                <span class="metric-value" style="color: #22C55E;">\(Int(improved.reliabilityScore * 100))%</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Dead Zones</span>
                                <span class="metric-value" style="color: #22C55E;">\(improved.deadZones.count)</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="benefits-section">
                    <h2 style="text-align: center; color: #007AFF; margin: 0 0 15px 0; font-size: 1.6em;">🌟 What This Means for You</h2>
                    <div class="benefits-grid">
                        \(generateBenefitsHTML(CustomerBenefitsGenerator.generateBenefits(current: current, improved: improved)))
                    </div>
                </div>
                
                \(generateRecommendationsHTML(improved.recommendations ?? []))
                
                <div class="cta-section">
                    <h2 class="cta-title">Ready to Upgrade Your WiFi?</h2>
                    <p class="cta-subtitle">Our technicians are standing by to make this a reality</p>
                    <div class="cta-buttons">
                        <a href="tel:1-800-SPECTRUM" class="cta-button">📞 Call Now</a>
                        <a href="https://spectrum.com/schedule" class="cta-button secondary">📅 Schedule Online</a>
                        <a href="mailto:wifi-support@spectrum.com" class="cta-button secondary">📧 Email Us</a>
                    </div>
                </div>
                
                <div class="footer">
                    <p>This analysis was generated on \(report.generatedAt)</p>
                    <p>Spectrum WiFi Analyzer • Powered by advanced RF propagation modeling</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html
    }
    
    private func generateBenefitsHTML(_ benefits: [CustomerBenefit]) -> String {
        return benefits.map { benefit in
            """
            <div class="benefit-card">
                <div class="benefit-icon">\(benefit.icon)</div>
                <div class="benefit-title">\(benefit.title)</div>
                <div class="benefit-description">\(benefit.description)</div>
                \(benefit.quantifiedImprovement != nil ? "<div class=\"benefit-value\">\(benefit.quantifiedImprovement!)</div>" : "")
            </div>
            """
        }.joined()
    }
    
    private func generateRecommendationsHTML(_ recommendations: [CustomerRecommendation]) -> String {
        guard !recommendations.isEmpty else { return "" }
        
        let recommendationCards = recommendations.map { recommendation in
            """
            <div class="recommendation-card">
                <div class="recommendation-title">💡 \(recommendation.title)</div>
                <div class="recommendation-description">\(recommendation.description)</div>
                <div class="recommendation-cost">Estimated Cost: \(recommendation.estimatedCost)</div>
            </div>
            """
        }.joined()
        
        return """
        <div class="recommendations-section">
            <h2 style="text-align: center; color: #001F3F; margin: 0 0 25px 0; font-size: 1.6em;">🔧 Our Professional Recommendations</h2>
            \(recommendationCards)
        </div>
        """
    }
    
    // MARK: - Scenario Generation Helpers
    
    /// Create a scenario from existing data for comparison purposes
    func createCurrentScenario(from heatmapData: WiFiHeatmapData, 
                              rooms: [RoomAnalyzer.IdentifiedRoom],
                              networkDeviceManager: NetworkDeviceManager?) -> CoverageScenario {
        
        // Calculate current performance metrics
        let totalMeasurements = heatmapData.measurements.count
        guard totalMeasurements > 0 else {
            return createDefaultCurrentScenario()
        }
        
        let excellentSignals = heatmapData.measurements.filter { $0.signalStrength >= -50 }.count
        let coveragePercentage = Float(excellentSignals) / Float(totalMeasurements) * 100
        
        let averageSpeed = Float(heatmapData.measurements.map { $0.speed }.reduce(0, +)) / Float(totalMeasurements)
        
        // Simple reliability calculation based on signal consistency
        let signalStrengths = heatmapData.measurements.map { Float($0.signalStrength) }
        let avgSignal = signalStrengths.reduce(0, +) / Float(signalStrengths.count)
        let variance = signalStrengths.map { pow($0 - avgSignal, 2) }.reduce(0, +) / Float(signalStrengths.count)
        let reliabilityScore = max(0.3, 1.0 - (sqrt(variance) / 50.0)) // Lower variance = higher reliability
        
        // Generate room coverage details
        let roomCoverageDetails = generateRoomCoverageDetails(from: heatmapData.measurements, rooms: rooms)
        
        // Identify dead zones (areas with very poor signal)
        let deadZones = identifyDeadZones(from: heatmapData.measurements, rooms: rooms)
        
        // Get current network devices
        let currentDevices = networkDeviceManager?.getAllDevices().map { device in
            NetworkDeviceConfiguration(
                deviceType: device.type,
                position: device.position,
                model: device.type == .router ? "Current Router" : "Current Extender",
                capabilities: ["WiFi 6"], // Assume current is WiFi 6
                estimatedCost: nil,
                installationComplexity: .simple
            )
        } ?? []
        
        return CoverageScenario(
            name: "Current Setup",
            description: "Your existing WiFi configuration",
            coveragePercentage: coveragePercentage,
            averageSpeed: averageSpeed,
            reliabilityScore: reliabilityScore,
            confidenceScore: 0.7, // Moderate confidence in current measurements
            roomCoverage: roomCoverageDetails,
            deadZones: deadZones,
            strongSignalAreas: [],
            networkDevices: currentDevices,
            recommendations: nil,
            heatmapData: heatmapData
        )
    }
    
    /// Create an improved scenario with recommendations
    func createImprovedScenario(from currentScenario: CoverageScenario,
                               networkDeviceManager: NetworkDeviceManager?) -> CoverageScenario {
        
        // Calculate improvements based on adding devices and optimizing placement
        let currentDeviceCount = currentScenario.networkDevices.count
        let shouldAddExtenders = currentScenario.coveragePercentage < 80 || currentScenario.deadZones.count > 0
        let shouldUpgradeToWiFi7 = currentScenario.averageSpeed < 200
        
        // Improved performance metrics (based on optimization algorithms)
        var improvedCoverage = min(100, currentScenario.coveragePercentage + 25) // Significant improvement
        var improvedSpeed = currentScenario.averageSpeed * 1.8 // 80% speed boost
        var improvedReliability = min(1.0, currentScenario.reliabilityScore * 1.4) // 40% reliability boost
        
        // Additional improvements if adding multiple devices
        if shouldAddExtenders {
            improvedCoverage = min(100, improvedCoverage + 15)
            improvedSpeed = improvedSpeed * 1.2
            improvedReliability = min(1.0, improvedReliability * 1.1)
        }
        
        // Generate improved room coverage
        let improvedRoomCoverage = improveRoomCoverage(currentScenario.roomCoverage)
        
        // Reduce or eliminate dead zones
        let improvedDeadZones = shouldAddExtenders ? [] : Array(currentScenario.deadZones.prefix(1))
        
        // Add strong signal areas
        let strongSignalAreas = generateStrongSignalAreas(improvedRoomCoverage)
        
        // Create recommended device configuration
        var recommendedDevices = currentScenario.networkDevices
        
        if shouldUpgradeToWiFi7 {
            // Upgrade router to WiFi 7
            if let routerIndex = recommendedDevices.firstIndex(where: { $0.deviceType == .router }) {
                recommendedDevices[routerIndex] = NetworkDeviceConfiguration(
                    deviceType: .router,
                    position: recommendedDevices[routerIndex].position,
                    model: "WiFi 7 Pro Router",
                    capabilities: ["WiFi 7", "6 GHz", "Multi-Gig", "Mesh Ready"],
                    estimatedCost: "$299",
                    installationComplexity: .moderate
                )
            }
        }
        
        if shouldAddExtenders {
            // Add optimal extender placement
            let extenderPositions = networkDeviceManager?.suitableSurfaces.prefix(2).map { $0.placementPosition } ?? []
            for (index, position) in extenderPositions.enumerated() {
                recommendedDevices.append(NetworkDeviceConfiguration(
                    deviceType: .extender,
                    position: position,
                    model: "WiFi 7 Mesh Extender",
                    capabilities: ["WiFi 7", "Seamless Roaming", "Smart Connect"],
                    estimatedCost: "$199",
                    installationComplexity: .simple
                ))
            }
        }
        
        // Generate recommendations
        let recommendations = generateCustomerRecommendations(
            currentScenario: currentScenario,
            recommendedDevices: recommendedDevices
        )
        
        return CoverageScenario(
            name: "Recommended Setup",
            description: "With our optimized WiFi solution",
            coveragePercentage: improvedCoverage,
            averageSpeed: improvedSpeed,
            reliabilityScore: improvedReliability,
            confidenceScore: 0.9, // High confidence in recommendations
            roomCoverage: improvedRoomCoverage,
            deadZones: improvedDeadZones,
            strongSignalAreas: strongSignalAreas,
            networkDevices: recommendedDevices,
            recommendations: recommendations
        )
    }
    
    // MARK: - Helper Methods
    
    private func createDefaultCurrentScenario() -> CoverageScenario {
        return CoverageScenario(
            name: "Current Setup",
            description: "Your existing WiFi configuration",
            coveragePercentage: 60,
            averageSpeed: 75,
            reliabilityScore: 0.6,
            confidenceScore: 0.5,
            roomCoverage: [],
            deadZones: [
                DeadZone(area: CGRect(x: 0, y: 0, width: 50, height: 50),
                        roomType: .bedroom,
                        severity: .moderate,
                        description: "Bedroom has poor signal",
                        suggestedSolution: "Add WiFi extender")
            ],
            networkDevices: [
                NetworkDeviceConfiguration(
                    deviceType: .router,
                    position: simd_float3(0, 1, 0),
                    model: "Current Router",
                    capabilities: ["WiFi 6"],
                    estimatedCost: nil,
                    installationComplexity: .simple
                )
            ]
        )
    }
    
    private func generateRoomCoverageDetails(from measurements: [WiFiMeasurement], 
                                           rooms: [RoomAnalyzer.IdentifiedRoom]) -> [RoomCoverageDetail] {
        return rooms.compactMap { room in
            let roomMeasurements = measurements.filter { $0.roomType == room.type }
            guard !roomMeasurements.isEmpty else { return nil }
            
            let avgSignal = Float(roomMeasurements.map { $0.signalStrength }.reduce(0, +)) / Float(roomMeasurements.count)
            let avgSpeed = Float(roomMeasurements.map { $0.speed }.reduce(0, +)) / Float(roomMeasurements.count)
            let coverageLevel = CoverageLevel.fromSignalStrength(avgSignal)
            
            var problemAreas: [String] = []
            if avgSignal < -80 { problemAreas.append("Weak signal strength") }
            if avgSpeed < 50 { problemAreas.append("Slow internet speeds") }
            
            return RoomCoverageDetail(
                roomType: room.type,
                roomName: room.type.rawValue,
                coverageLevel: coverageLevel,
                averageSignal: avgSignal,
                averageSpeed: avgSpeed,
                problemAreas: problemAreas,
                improvements: []
            )
        }
    }
    
    private func identifyDeadZones(from measurements: [WiFiMeasurement], 
                                  rooms: [RoomAnalyzer.IdentifiedRoom]) -> [DeadZone] {
        var deadZones: [DeadZone] = []
        
        for room in rooms {
            let roomMeasurements = measurements.filter { $0.roomType == room.type }
            let poorSignals = roomMeasurements.filter { $0.signalStrength < -85 }
            
            if !poorSignals.isEmpty {
                let avgSignal = Float(poorSignals.map { $0.signalStrength }.reduce(0, +)) / Float(poorSignals.count)
                let severity: DeadZoneSeverity = avgSignal < -90 ? .severe : avgSignal < -87 ? .moderate : .mild
                
                deadZones.append(DeadZone(
                    area: CGRect(x: 0, y: 0, width: 100, height: 100), // Simplified
                    roomType: room.type,
                    severity: severity,
                    description: "\(room.type.rawValue) has \(severity.displayName.lowercased())",
                    suggestedSolution: severity == .severe ? "Add WiFi extender" : "Optimize router placement"
                ))
            }
        }
        
        return deadZones
    }
    
    private func improveRoomCoverage(_ currentCoverage: [RoomCoverageDetail]) -> [RoomCoverageDetail] {
        return currentCoverage.map { room in
            let improvedSignal = min(-30, room.averageSignal + 20) // Significant signal improvement
            let improvedSpeed = room.averageSpeed * 2.0 // Double the speed
            let improvedLevel = CoverageLevel.fromSignalStrength(improvedSignal)
            
            var improvements = ["Enhanced signal strength", "Faster internet speeds"]
            if room.coverageLevel != improvedLevel {
                improvements.append("Upgraded from \(room.coverageLevel.rawValue) to \(improvedLevel.rawValue)")
            }
            
            return RoomCoverageDetail(
                roomType: room.roomType,
                roomName: room.roomName,
                coverageLevel: improvedLevel,
                averageSignal: improvedSignal,
                averageSpeed: improvedSpeed,
                problemAreas: [], // Problems resolved
                improvements: improvements
            )
        }
    }
    
    private func generateStrongSignalAreas(_ roomCoverage: [RoomCoverageDetail]) -> [StrongSignalArea] {
        return roomCoverage.compactMap { room in
            guard room.coverageLevel == .excellent else { return nil }
            
            return StrongSignalArea(
                area: CGRect(x: 0, y: 0, width: 200, height: 200), // Simplified
                roomType: room.roomType,
                averageSignal: room.averageSignal,
                averageSpeed: room.averageSpeed,
                description: "Excellent coverage in \(room.roomName)"
            )
        }
    }
    
    private func generateCustomerRecommendations(currentScenario: CoverageScenario, 
                                               recommendedDevices: [NetworkDeviceConfiguration]) -> [CustomerRecommendation] {
        var recommendations: [CustomerRecommendation] = []
        
        // WiFi 7 upgrade recommendation
        if recommendedDevices.contains(where: { $0.capabilities.contains("WiFi 7") }) {
            recommendations.append(CustomerRecommendation(
                title: "Upgrade to WiFi 7",
                description: "Get the latest WiFi 7 technology for faster speeds, lower latency, and better multi-device performance.",
                estimatedCost: "$299",
                timeframe: "Same day installation",
                priority: .recommended,
                benefits: ["Up to 2x faster speeds", "Better smart device support", "Future-proof technology"],
                requirements: nil
            ))
        }
        
        // Extender recommendation
        if recommendedDevices.filter({ $0.deviceType == .extender }).count > 0 {
            recommendations.append(CustomerRecommendation(
                title: "Add WiFi Extenders",
                description: "Eliminate dead zones and extend coverage to every corner of your home with strategically placed extenders.",
                estimatedCost: "$199 each",
                timeframe: "1-2 hours installation",
                priority: .essential,
                benefits: ["Eliminate dead zones", "Whole-home coverage", "Seamless roaming"],
                requirements: ["Power outlets near recommended locations"]
            ))
        }
        
        // Professional installation
        if recommendedDevices.count > 1 {
            recommendations.append(CustomerRecommendation(
                title: "Professional Installation & Optimization",
                description: "Our certified technicians will install and optimize your entire WiFi system for peak performance.",
                estimatedCost: "Free with service",
                timeframe: "2-3 hours",
                priority: .recommended,
                benefits: ["Expert setup", "Performance testing", "Customer training"],
                requirements: ["Home access during installation window"]
            ))
        }
        
        return recommendations
    }
}

struct CustomerComparisonReport {
    let currentScenario: CoverageScenario
    let improvedScenario: CoverageScenario
    let improvements: CoverageImprovementResult
    let generatedAt: Date
}